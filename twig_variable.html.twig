{% extends "base.html.twig" %}
{% block title %}twig  show global variable{% endblock %}

{% block body %}
 {# https://ourcodeworld.com/articles/read/621/answers-and-explanations-to-20-questions-that-every-twig-developer-should-be-able-to-answer #}
 <h1>here is curent local  we are defined in AppExtentions and implements GlobalsInterface  {{locale}}</h1>
 <h1>here is curent message from parameter we are defined in sevices.yaml {{message}}</h1>
 <h1>here is my name we are defined in twig.yaml {{myName}}</h1>

 <h1>app.environment ' {{app.environment}} '</h1>
 <h1>app.user ' {{app.user}} '</h1>
 <h1>app.user.email ' {{app.user.email}} '</h1>
 <h1>app.request ' {{app.request}} '</h1>
 <h1>app.request.query.get('id') ' {{app.request.query.get('id')}} '</h1>
 <h1>app.debug  if app is runing in debug mode  ' {{app.debug}} '</h1>
 <h1>app.session ' {{app.session.isStarted()}} '</h1>

    {# error messages #}
  {% for message in app.flashes('messageName') %}
       {{message}}
  {% endfor %}
  {# error messages with label #}
  {% for label, messages in app.flashes %}
    {% for message in messages %}
        <div class="alert alert-{{ label }}">
            {{ message }}
        </div>
    {% endfor %}
    {% endfor %}

    {# is_granted('role') #}
    {% if is_granted('Role_user') %}
       make some think 
    {% endif %}

    {# logout_path #}
    <a href="{{logout_path()}}">logout</a>



{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
     {# 1 -Variable declaration #}
     {% set fooA = "foo" %}
     {% set fooB = [1,2,3] %}
     {% set fooC = {
           "name":"ahmad",
           "age":33,
           "fooB":fooB
     } %}
    {{ fooC.name }}
    {{ fooC.group[0]}}

{# Note that if a property contains special characters (as dots or minus : myVariable.my-property 
or myVariable.my.property) you'll need to use the attribute function to access it as normally that syntax would cause a Twig error : #}

  {{ attribute(myVariable, 'my-property') }}

   {{ attribute(myVariable, 'my.property') }}

{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 2 -String interpolation #}
 {% set name = "aaa" %}
 {{ "hi #{name} , how are you" }}
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 3 -The loop variable inside a for loop and else tag #}
  {% for item in items %}
      {% if loop.last %}
      
      {% endif %}
      
  {% endfor %}

  {# It becomes automatically a condition if the variable to iterate is empty. #}
  <ul>
    {% for user in users %}
        <li>{{ user.username|e }}</li>
    {% else %}
        <li><em>no users available</em></li>
    {% endfor %}
</ul>
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 4 -iterable  #}
{% if users is iterable %}
  {% for user in users %}
        Hello {{ user }}!
    {% endfor %}
{% else %}
    {# users is probably a string #}
    Hello {{ users }}!
{% endif %}
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 5- Sometimes, when using nested loops, you need to access the parent context. 
The parent context is always accessible via the loop.parent variable. For instance, if you have the following template data: #}

{% set data = {
    "topics":{
        "topic1":["message 1 for topic 1","message 2 for topic 1"],
        "topic2":["message 1 for topic 2","message 2 for topic 2"],
    }
} %}
    
  {% for topic,messages in data.topics %}
       {{ loop.index }}: {{ topic }}
     {% for message in messages %}
         {{ loop.parent.loop.index }}.{{ loop.index }}: {{ message }}
     {% endfor %}
      
  {% endfor %}

{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 6 - Twig supports Regular Expressions #}
{% if "ahmad" starts  with 'a' %}{% endif %}
{% if "almasri" ends  with 'i' %}{% endif %}
{% if "mail@mail.com" matches '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,})$/' %}
    {{"Is a valid mail"}}
{% else %}
    {{"It doesn't seems to be a valid mail buddy."}}
{% endif %}
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
 {# 7_ Control the spaces when you print variables #}
{% for i in 1..10 %}
    {# Note the - symbol at the beginning and the end of the print tag #}
    {{- i -}}
{% endfor %}

{# Outputs :
    12345678910
#}

{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 8 -The date_modify filter modifies a date with a given modifier string : #}
{{"now"|date_modify("+1 month")|date('Y-m-d')}}
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 9-Limit string length #}
{% set myTextVariable = "A semi long string"%}

{{myTextVariable|slice(0,10)}} {# Outputs : A semi lon #}

{# If the string length > 50, then cut it and append 3 dots .... | otherwise just print the text.#}
{{ myTextVariable|length > 50 ? myTextVariable|slice(0, 10) ~ '...' : myTextVariable }}

{# Which is the same as : #}
{% if myTextVariable|length > 50 %}
    {{ myTextVariable|slice(0, 10) ~ '...'}}
{% else %}
    {{ myTextVariable }}
{% endif %}


{# 10-Use macro #}
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# Macros are comparable with functions in regular programming languages. They are useful to put often used HTML idioms into reusable elements to not repeat yourself.
Basically and theoretically: is a type of self-written twig function which outputs custom html according to received parameters. #}
{% import "forms.html" as forms %}
or 
{% import _self as forms %}

{% macro input(name, value, type, size) %}
    <div class="form-group">
        <input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />
    </div>
{% endmacro %}

{% import _self as forms %}

<form action="register.php" method="post">
    {{forms.input("frm_username",null,"text")}}
    {{forms.input("frm_password",null,"password")}}
    {{forms.input("frm_email",null,"email")}}
    {{forms.input("frm_birthday",null,"date")}}
    {{forms.input("frm_submit","Register","submit")}}
</form>

{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{#11 - How to concatenate strings in Twig #}
{{"Hello " ~ app.user.username ~ " how are you today?"}}
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 12- How to check if a variable exists #}
{% if variable is defined %}
    {{- "Variable exists :" ~ variable -}}
{% endif %}
{# 12 How to check if a string or array contains a value #}
{% set mytext = "hello how are you today" %}

{% set myarray = ["Hello",12,15,"other string"] %}

{% if "hello" in mytext %}
    {{"'hello' has been found in the string"}}
{% endif %}

{% if "Hello" or 12 in myarray %}
    {{"15 or hello found in array"}}
{% endif %}



{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# 13 -How to print safely a string variable from Twig in JavaScript #}
{% set varUsedInJavascript = "ahmad" %}
{% set varUsedInJavascript2 = "ahmad,
this is may new line
" %}

{# // will throw un exeption  #}
<script>
    var userName = "{{- varUsedInJavascript -}}";
    var description = "{{- varUsedInJavascript2-}}";
</script>

<script>
    var userName = "{{- varUsedInJavascript|escape("js") -}}";
    var description = "{{- varUsedInJavascript2|escape("js") -}}";
</script>
{# Printing arrays to json safely #}

{% set myData = {
    "a": "Complex String Data",
    "b": 12345,
    "c": "Hello,
        Multiline String
    "
}%}

<script>
    var myData = {{ myData|json_encode()|row }};
</script>

{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{#14-  For convenience sake of this snippet, store the errors in a variable #}
{% set formErrors = MyFormVariable.vars.errors.form.getErrors(true) %}
                                    
{# If there are errors in the form, display them in this unorganized list #}
{% if formErrors|length %}
    <ul>
        {% for error in formErrors %}
            <li>{{ error.message }}</li>
        {% endfor %}
    </ul>
{% endif %}


{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}

{# VARIABLE	DESCRIPTION
loop.index	The current iteration of the loop. (1 indexed)
loop.index0	The current iteration of the loop. (0 indexed)
loop.revindex	The number of iterations from the end of the loop (1 indexed)
loop.revindex0	The number of iterations from the end of the loop (0 indexed)
loop.first	True if first iteration
loop.last	True if last iteration
loop.length	The number of items in the sequence
loop.parent	The parent context #}
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# What's the output of the following snippet? #}
{{ {name: "Xavier", lastName: "Nemo", first: false, address: "P Sherman, 42 Wallaby Way, Sydney"} | first }}
"Xavier"
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{# The verbatim tag exists and allow you to write any Twig syntax inside the block
, however this won't be parsed as twig but as Plain Text,  #}
{% verbatim %}
    <ul>
    {% for row in rows %}
        <li title="{{ rows.title }}">{{ rows.text }}</li>
    {% endfor %}
    </ul>
{% endverbatim %}
the output is 
<ul>
    {% for row in rows %}
        <li title="{{ rows.title }}">{{ rows.text }}</li>
    {% endfor %}
</ul>
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{% spaceless %}
     <div   class="welcome-alert">
        <h1 >Welcome David !</h1>
    </div>
{% endspaceless %}
the output is <div   class="welcome-alert"><h1 >Welcome David !</h1></div>
{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
. It's possible to use the same PHP constants in Twig by default
{% set data = {
    "Hey": "Ho",
    "What": 12,
    "Value" : true
}%}
{{data|json_encode(constant('JSON_PRETTY_PRINT'))}}

{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
 How can you print a random value from an array with Twig?
 {{ random([1,2,3]) }}

{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
How can you print the value of the "a-b" attribute from the following key-value array?
{% set MyVariable = {
    "a": 1,
    "b": 2,
    "c": 3,
    "a-b": 4
}%}
the corecct is 
{{MyVariable['a-b']}}
or
{{ attribute(MyVariable, 'a-b') }}

{# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
 new inner scope. Variables set within this scope are not visible outside of the scope
  {% with %}
   {% set variableScop = 33 %}
  {% endwith %}

 {# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
 How can you verify if 2 variables are identical (important identical not equal)
 {% if variable is same as(variable2) %}{% endif %}
 {# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{% if variable is same as(variable2) %}{% endif %}
{% if a is divisible by(b) %}
{% if a is iterable %}
{% if a is empty %}
{% if a is odd %}
{% if a is defined %}{% endif %}

 {# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
The batch filter exists and split an existing array into chunks from the size of the integer providen as first argument (it can be a number in string format as well).
{% set items = ['a', 'b', 'c', 'd', 'e', 'f', 'g', "h"] %}

<table>
{% for row in items|batch(4) %} // each array of 4 element 
    <tr>
        {%- for column in row -%}
            <td>{{ column }}</td>
        {%- endfor -%}
    </tr>
{% endfor %}
</table>

thie output is 
<table>
    <tr><td>a</td><td>b</td><td>c</td><td>d</td></tr>
    <tr><td>e</td><td>f</td><td>g</td><td>h</td></tr>
</table>
 {# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}

 {# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
 
 {# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #}
{% endblock %}